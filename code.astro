---
import type { HTMLAttributes } from "astro/types"
import type { SupportedLang } from "./scripts/types.ts"

interface Props extends HTMLAttributes<"code"> {
	code: string | string[]
	lang: SupportedLang
	label?: string
}

const { code, lang, ...props } = Astro.props

const formattedCode = Array.isArray(code) ? code.join("\n") : code
---

<code data-lang={lang} {...props}>{formattedCode}</code>
<script>
	import type { SupportedLang } from "./scripts/types.ts"

	import { highlight } from "./scripts/highlight.js"
	import { Prism } from "./scripts/prism.js"

	import "./scripts/prism-lang-css.js"
	import "./scripts/prism-lang-html.js"
	import "./scripts/prism-lang-js.js"
	import "./scripts/prism-lang-jsx.js"
	import "./scripts/prism-lang-sh.js"
	import "./scripts/prism-lang-svg.js"
	import "./scripts/prism-lang-tsx.js"
	import "./scripts/prism-lang-xml.js"

	for (const $code of document.querySelectorAll<HTMLElement>("[data-lang]")) {
		const lang = $code.dataset.lang! as SupportedLang
		const text = $code.firstChild! as Text

		const language = Prism.languages[lang]

		if (language) {
			const tokens = Prism.tokenize(text.data, language)

			highlight(text, tokens, "source", 0)
		}
	}
</script>
